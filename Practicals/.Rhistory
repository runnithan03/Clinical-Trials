## Allocation
install.packages(c("medicaldata", "ggplot2", "gtsummary", "Minirand",
"blockrand", "dplyr", "randomizeR"))
library(medicaldata)
library(ggplot2)
library(gtsummary)
library(Minirand)
library(blockrand)
library(dplyr)
library(randomizeR)
# Licorice gargle dataset
data("licorice_gargle")
?licorice_gargle
# baseline characteristics used in allocation
str(licorice_gargle)
lic_garg = licorice_gargle[ ,1:8]
# vector of names of columns to be coerced to factor
cols <- c("preOp_gender", "preOp_asa",
"preOp_mallampati", "preOp_smoking", "preOp_pain", "treat")
# convert each of those columns to factors
lic_garg[cols] <- lapply(lic_garg[cols], factor)
# Check the result:
str(lic_garg)
# Demographic tables
# Licorice gargle data contains the allocation used in the trial,
# so we can create a table summarising the participants in each group.
tbl_summary(lic_garg, by = "treat")
# We can also save this as an object and access the individual sub-tables, for example:
rb_tab = randbalance(
trt = lic_garg$treat,
covmat = lic_garg[,-8],
ntrt=2,
trtseq = c("0", "1"))
rb_tab$preOp_gender
# There are also packages with functions to output these demographic tables formatted for use in latex documents, for example atable.
# Binning continuous variables
View(lic_garg)
# Binning continuous variables
# Binning in the context of clinical trials is a method used to group continuous data into discrete categories (bins).
lic_garg$preOp_age
lic_garg$age[lic_garg$preOp_age < 50] <- "Under 50"
lic_garg$age[lic_garg$preOp_age >= 50 & lic_garg$preOp_age < 70] <- "50 to 70"
lic_garg$age[lic_garg$preOp_age >= 70] <- "70 plus"
lic_garg$age = factor(lic_garg$age, levels = c("Under 50", "50 to 70", "70 plus"))
licgarg
lic_garg
table(lic_garg)
lic_garg$BMI[lic_garg$preOp_calcBMI < 25] <- "medium_or_low"
lic_garg$BMI[lic_garg$preOp_calcBMI >= 25] <- "high"
lic_garg$BMI = factor(lic_garg$BMI, levels = c("medium_or_low", "high"))
lic_garg$BMI
table(lic_garg$age)
table(lic_garg$BMI)
lg_df = lic_garg[,c(1,2,5,6,7,9,10,8)]
lg_df
View(lic_garg)
# A Measure of Imbalance
imbalance = function(
df,   # participant data frame with allocation column included
alloc # name of allocation column
){
alloc_vec = as.factor(df[ ,names(df)==alloc])
alloc_lev = levels(alloc_vec) # how the treatment groups are coded
n1 = nrow(df[df[alloc]==alloc_lev[1],])
n2 = nrow(df[df[alloc]==alloc_lev[2],])
abs(n1-n2)
}
View(lic_garg)
# imbalance in the allocation recorded in the lic_garg dataset
imbalance(df = lic_garg, alloc = "treat")
# In simple random allocation, each participant is allocated to one of the two trial arms with equal probability.
srs = function(
df, # DF should be the participant data frame.
# A column 'treat' will be added
levels = c("0", "1") # Levels of treat factor
){
n = nrow(df) # number of rows / participants
# Create a new column 'treat'
df$treat = rep(NA, n)
# work through the rows, randomly allocating patients with probably 1/2
for (i in 1:n){
df$treat[i] = sample(levels, size=1, prob = c(0.5, 0.5))
}
df$treat = as.factor(df$treat)
df
}
srs(licorice_gargle)
srs(licorice_gargle, levels = c("T", "C"))
View(lg_df)
lg_srs = srs(
df = lg_df[,-8], # remove treatment column
levels = c("T", "C")
)
View(lg_srs)
# Balance Table
tbl_summary(lg_srs, by = "treat")
imbalance(lg_srs, alloc = "treat")
blockrand(n=100)
# allocation for the licorice_gargle data (remember our data frame is now lg_df) and produce the balance table
?blockrand
blockrand(nrow(lg_df))
nrow(lg_df)
blockrand(lg_df)
nrow(lg_df)
blockrand(nrow(lg_df))
blockrand(nrow(lg_df))
blockrand(nrow(lg_df))
nrow(lg_df)
nrow(lg_df)
nrow(lg_df)
nrow(lg_df)
nrow(lg_df)
nrow(lg_df)
blockrand(nrow(lg_df))
lg_block <- blockrand(nrow(lg_df))
# Balance Table
tbl_summary(lg_block, by = "treat")
lg_block <- blockrand(nrow(lg_df))
lg_block
# Balance Table
tbl_summary(lg_block, by = "treatment")
rpb_lg = blockrand(n=235, levels = c("T", "C"))
# Let’s add this to our participant data to create a new data frame lg_rpb:
# create the new data frame, a copy of lg_df
lg_rpb = lg_df
lg_rpb
View(lg_rpb)
View(rpb_lg)
blockrand(n=100)
View(rpb_lg)
lg_rpb = lg_df
# Replace the original treat column with the RPB treatment column
# Using only the first 235 allocations
lg_rpb$treat = rpb_lg$treatment[1:235]
lg_rpb$treat
lg_rpb$treat
lg_rpb
# balance table:
tbl_summary(lg_rpb, by = "treat")
rpb_lg = blockrand(n=235, levels = c("T", "C")) # Remember to define the levels...
# Let’s add this to our participant data to create a new data frame lg_rpb:
# create the new data frame, a copy of lg_df
lg_rpb = lg_df
View(lg_rpb)
rpb_lg = blockrand(n=235, levels = c("T", "C")) # Remember to define the levels...
# Let’s add this to our participant data to create a new data frame lg_rpb:
# create the new data frame, a copy of lg_df
lg_rpb = lg_df
# Replace the original treat column with the RPB treatment column
# Using only the first 235 allocations
lg_rpb$treat = rpb_lg$treatment[1:235]
# balance table:
tbl_summary(lg_rpb, by = "treat")
# Imbalance command
imbalance(lg_rpb, alloc = "treat")
biased_coin = function(
data,
levels = c("T", "C"),
p=2/3
){
Dn = 0 # starting value of imbalance
n = nrow(data)
alloc = rep(NA, n)
for (i in 1:n){
if (Dn==0){ # equally balanced
alloc[i] = sample(levels, size=1, prob=c(0.5, 0.5) )
} else if(Dn<0){ # More allocations to levels[2] up to this point
alloc[i] = sample(levels, size=1, prob=c(p, 1-p) )
} else if(Dn>0){ # More allocations to levels[1] up to this point
alloc[i] = sample(levels, size=1, prob=c(1-p, p) )
}
# Compute imbalance at this stage
alloc_to_n = alloc[1:i]
Dn = sum(alloc_to_n==levels[1]) - sum(alloc_to_n == levels[2])
}
data$treat = as.factor(alloc)
data
}
# try p = 0.9
lg_bc1 = biased_coin(
data=lg_df[,-8],
p=0.9
)
tbl_summary(lg_bc1, by = "treat")
imbalance(lg_bc1, alloc="treat")
# B 1.2.4 Urn Designs
? UDPar
# B 1.2.4 Urn Designs
?udPar
# The function udPar creates a model object, storing the parameters for the particular Urn design.
# To generate sequences of allocations, we use the function genSeq
ud_31 = udPar(235, 3, 1, c("0", "1"))
seq_ud31 = genSeq(ud_31)
ud_31
seq_ud31
# The allocation vector is stored as a row in the matrix M which is a slot in the genSeq object (part of the object).
# You can access it by
seq_ud31$M[1,]
# B.1.3 Stratifying the dataset
# Add an ID variable so that we can keep track of the order of participants
lg_df$ID = 1:nrow(lg_df)
# split the data frame according to levels of factors
strat_gen_sm <- lg_df %>%
group_split(preOp_gender, preOp_smoking)
strat_gen_sm
# We’ll stick with the group as above. To find the numbers of participants in each group we do
group_sizes = sapply(
1:length(strat_gen_sm),
function(i){
nrow(strat_gen_sm[[i]])
}
)
group_sizes
# B.1.3.1 Another measure of imbalance
# To see how well balanced our allocations are in terms of each covariate, we will define a function summing the marginal imbalance
marg_imbalance = function(
df,  # participant data frame, including allocation and all factor variables
alloc, # name of allocation column
factors # names of prognostic factors to be included
){
df = as.data.frame(df) # deals with tibbles
n_fact = length(factors) # the numbers of factors
imb_sum=0                # a running total of imbalance
for (i in 1:n_fact){     # loop through the factors
ind_i = (1:ncol(df))[names(df)==factors[i]]
col_i = as.factor(df[ ,ind_i])
levels_i = levels(col_i)
nlevels_i = length(levels_i)
for (j in 1:nlevels_i){ # loop through the levels of factor i
# df_ij contains just those entries with level j of factor i
df_ij = df[df[ ,ind_i]==levels_i[j] , ]
imb_ij = imbalance(df=df_ij, alloc=alloc) # find the imbalance for the sub-data-frame in which factor i has level j
imb_sum = imb_sum + imb_ij
}
}
imb_sum
}
# For example, to find the marginal imbalance over the gender and age factors, use
marg_imbalance(df=lg_df, alloc="treat", factors = c("preOp_gender", "age"))
# This command creates an empty list, which we will fill with allocation data frames as we go through
alloc_list = list()
# The loop works through the stratified data frames, applies SRS to allocate patients
# and stores them in alloc_list
for (i in 1:length(strat_gen_sm)){
alloc_list[[i]] = srs(strat_gen_sm[[i]])
}
# bind all the data frames back together again
alloc_full= dplyr::bind_rows(alloc_list)
# re-order according to ID variable
alloc_full[order(alloc_full$ID),]
View(alloc_full)
## Information about the treatment
ntrt <- 3 # There will three treatment groups
trtseq <- c(1, 2, 3) # the treatment groups are indexed 1, 2, 3
ratio <- c(2, 2, 1)  # the treatment groups will be allocated in a 2:2:1 ratio
## The next few rows generate the participant data frame
nsample <- 120 # we will have 120 participants
c1 <- sample(seq(1, 0), nsample, replace = TRUE, prob = c(0.4, 0.6))
c2 <- sample(seq(1, 0), nsample, replace = TRUE, prob = c(0.3, 0.7))
c3 <- sample(c(2, 1, 0), nsample, replace = TRUE, prob = c(0.33, 0.2, 0.5))
c4 <- sample(seq(1, 0), nsample, replace = TRUE, prob = c(0.33, 0.67))
covmat <- cbind(c1, c2, c3, c4) # generate the matrix of covariate factors for the subjects
# label of the covariates
colnames(covmat) = c("Gender", "Age", "Hypertension", "Use of Antibiotics")
covwt <- c(1/4, 1/4, 1/4, 1/4) # equal weights/importance applied to each factor
## Applying the algorithm - start here if you already have participant data!
res <- rep(NA, nsample) # Generate a vector to store the results (the allocations)
# generate treatment assignment for the 1st subject
res[1] = sample(trtseq, 1, replace = TRUE, prob = ratio/sum(ratio))
# work through the remaining patients sequentially
for (j in 2:nsample)
{
# get treatment assignment sequentially for all subjects
# The vector res is updated and so all previous allocations are accounted for
# covmat is the data frame of participant data
res[j] <- Minirand(
covmat=covmat, j, covwt=covwt, ratio=ratio, ntrt=ntrt, trtseq=trtseq, method="Range", result=res, p = 0.9
)
}
## Store the allocation vector 'res' as 'trt1'
trt1 <- res
# Display the number of randomized subjects at covariate factors
balance1 <- randbalance(trt1, covmat, ntrt, trtseq)
balance1
# Calculate the total imbalance of the allocation
totimbal(trt = trt1, covmat = covmat, covwt = covwt,
ratio = ratio, ntrt = ntrt, trtseq = trtseq, method = "Range")
View(lg_df)
# Adapt the code above to apply the minimisation algorithm to the licorice gargle data. Investigate how balanced the data set is.
nsample = nrow(lg_df)
res = rep(NA, nsample)
res[1] = sample(c(0,1), 1, replace = TRUE, prob = c(0.5,0.5))
# work through the remaining patients sequentially
for (j in 2:nsample){
# get treatment assignment sequentially for all subjects
# The vector res is updated and so all previous allocations are accounted for
# covmat is the data frame of participant data - including only the covariates
res[j] <- Minirand(
covmat=lg_df[ ,1:7], j, covwt=rep(1,7)/7, ratio=c(1,1), ntrt=2, trtseq=c(0,1), method="Range", result=res, p = 0.9
)
}
lg_df$treat = res
lg_df
# Display the number of randomized subjects at covariate factors
balance1 <- randbalance(lg_df$treat, covmat=lg_df[ ,1:7], ntrt=2, trtseq=c(0,1))
balance1
# Calculate the total imbalance of the allocation
totimbal(trt = lg_df$treat, covmat = lg_df[ ,1:7], covwt = rep(1,7)/7,
ratio = ratio, ntrt = 2, trtseq = c(0,1), method = "Range")
# Calculate the total imbalance of the allocation
totimbal(trt = lg_df$treat, covmat = lg_df[ ,1:7], covwt = rep(1,7)/7,
ratio = c(1,1), ntrt = 2, trtseq = c(0,1), method = "Range")
# Treatment for maternal periodontal disease
load(medical_data)
# Treatment for maternal periodontal disease
require(medicaldata)
medicaldata
# Treatment for maternal periodontal disease
require(medicaldata)
# Treatment for maternal periodontal disease
install.packages("medicaldata")
install.packages("medicaldata")
require(medicaldata)
?opt
opt
ggplot(data=opt, aes(x=Birthweight, fill=Group)) + geom_histogram(position="dodge")
opt_red = opt[ ,c(1:22,72)]
# Change NAs to "None" for diabetic
# since in opt the non-diabetic people are coded as NA (and therefore excluded from the model)
diab = as.character(opt_red$BL.Diab.Type)
diab[is.na(diab)] = "None"
opt_red$BL.Diab.Type = as.factor(diab)
# similar problem with smokers and how many cigarettes per day
# If people are non-smokers and have missing for number of cigarettes per day
# change their number of cigarettes to zero
sm = opt_red$Use.Tob
cigs = opt_red$BL.Cig.Day
cigs[(is.na(cigs)&(sm=="No "))] = 0
opt_red$BL.Cig.Day = cigs
# Same for alcohol and drinks per day
alc = opt_red$Use.Alc
dr = opt_red$BL.Drks.Day
dr[(is.na(dr)&(alc=="No "))] = 0
opt_red$BL.Drks.Day = dr
# If a participant hasn't had a previous pregnancy, her N.prev.preg should be zero (not NA)
pp = opt_red$Prev.preg
npp = opt_red$N.prev.preg
npp[pp=="No "] = 0
opt_red$N.prev.preg = npp
opt_red
# Check SDs are fairly close before proceeding
sd(opt_red$Birthweight[opt_red$Group == "T"], na.rm=T)
sd(opt_red$Birthweight[opt_red$Group == "C"], na.rm=T)
t.test(
x=opt_red$Birthweight[opt_red$Group == "T"],
y=opt_red$Birthweight[opt_red$Group == "C"],
alternative = "two.sided",
var.equal=T, # this makes the method use pooled variances, as we did in lectures
conf.level = 0.95 # note that this is 1-alpha
)
# Now we will move on to ANCOVA.
# To fit a linear model including every variable as a covariate (apart from the target variable), we can do
lm_full = lm(Birthweight ~ ., data = opt_red[ ,-1]) # don't include the ID column!
summary(lm_full)
# Now we will move on to ANCOVA.
# To fit a linear model including every variable as a covariate (apart from the target variable), we can do
lm_full = lm(Birthweight ~ ., data = opt_red[ ,-1]) # don't include the ID column!
summary(lm_full)
# We see from the model summary that our model is terrible:
# R^2 =  0.03241, which means it is explaining about 3% of the variance in Birthweight.
# If you want to use only certain terms, you can include them in the formula, for example
lm_eg = lm(Birthweight ~ Group + Age + Hypertension, data=opt_red)
# Perform some diagnostic checks on your model. Do you have any reason to suspect it isn’t adequate?
# The first step is to extract the residuals and the fitted values (which are also useful).
# We will create a new data frame called opt_diag with these in, so that we can plot things easily but don’t pollute our original dataset (in case we want to fit any more models)
opt_diag = na.omit(opt_red) # lm only fits where all variables are present
opt_diag$resid = resid(lm_full)
opt_diag$fitted = fitted(lm_full)
opt_diag
# plot examples:
ggplot(data=opt_diag, aes(x=resid, fill=Group)) + geom_histogram(position="dodge")
ggplot(data=opt_diag, aes(x=fitted, y=resid, col=Group)) + geom_point()

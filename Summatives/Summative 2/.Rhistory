# Censor everything after 274 days
censored_after_274 = time > 274
time[censored_after_274] = 274
status[censored_after_274] = 0
# Create data frame for Cox regression
data = data.frame(
time = time,
status = status,
arm = arm
)
# Fit Cox model
cox_model = coxph(Surv(time, status) ~ arm, data = data)
# Extract p-value for the treatment effect (arm)
p_val = summary(cox_model)$coefficients["armT", "Pr(>|z|)"]
# Reject H0 if p-value < 0.05
H0_reject_vec[i] = ifelse(p_val < 0.05, 1, 0)
}
power.est = mean(H0_reject_vec)
return(power.est)
}
# Parameters
nsim = 1000
N = 320  # Number of participants per group (example)
rate_C = log(2) / 103  # Hazard rate for control group (median = 103 days)
rate_T = log(2) / 138  # Hazard rate for treatment group (median = 138 days)
# Run the simulation
power = exp_sim_cox(nsim, N, rate_C, rate_T)
# Simulation Method with Censoring
exp_sim_cox = function(
nsim,     # Number of simulations
N,        # Number of participants per group
rate_C,   # Hazard rate in control group (lambda_C)
rate_T    # Hazard rate in treatment group (lambda_T)
){
H0_reject_vec = rep(NA, nsim) # Store 1 if H0 rejected, 0 otherwise
for (i in 1:nsim){
# Simulate survival times from exponential distributions
surv_C = rexp(n = N, rate = rate_C)  # Control group
surv_T = rexp(n = N, rate = rate_T)  # Treatment group
# Combine survival times
time = c(surv_C, surv_T)
arm = rep(c("C", "T"), each = N)
# Create initial status vector (1 for events)
status = rep(1, 2 * N)
# 5% random censoring for dropouts
dropout_indices = sample(1:(2 * N), size = round(0.05 * 2 * N))
status[dropout_indices] = 0
time[dropout_indices] = runif(length(dropout_indices), 0, time[dropout_indices])
# Censor everything after 274 days
censored_after_274 = time > 274
time[censored_after_274] = 274
status[censored_after_274] = 0
# Create data frame for Cox regression
data = data.frame(
time = time,
status = status,
arm = arm
)
# Fit Cox model
cox_model = coxph(Surv(time, status) ~ arm, data = data)
# Extract p-value for the treatment effect (arm)
p_val = summary(cox_model)$coefficients["armT", "Pr(>|z|)"]
# Reject H0 if p-value < 0.05
H0_reject_vec[i] = ifelse(p_val < 0.05, 1, 0)
}
power.est = mean(H0_reject_vec)
return(power.est)
}
# Parameters
nsim = 1000
N = 320  # Number of participants per group (example)
rate_C = log(2) / 103  # Hazard rate for control group (median = 103 days)
rate_T = log(2) / 138  # Hazard rate for treatment group (median = 138 days)
# Run the simulation
power = exp_sim_cox(nsim, N, rate_C, rate_T)
# Simulation Method with Censoring
exp_sim_cox = function(
nsim,     # Number of simulations
N,        # Number of participants per group
rate_C,   # Hazard rate in control group (lambda_C)
rate_T    # Hazard rate in treatment group (lambda_T)
){
H0_reject_vec = rep(NA, nsim) # Store 1 if H0 rejected, 0 otherwise
for (i in 1:nsim){
# Simulate survival times from exponential distributions
surv_C = rexp(n = N, rate = rate_C)  # Control group
surv_T = rexp(n = N, rate = rate_T)  # Treatment group
# Combine survival times
time = c(surv_C, surv_T)
arm = rep(c("C", "T"), each = N)
# Create initial status vector (1 for events)
status = rep(1, 2 * N)
# 5% random censoring for dropouts
dropout_indices = sample(1:(2 * N), size = round(0.05 * 2 * N))
status[dropout_indices] = 0
time[dropout_indices] = runif(length(dropout_indices), 0, time[dropout_indices])
# Censor everything after 274 days
censored_after_274 = time > 274
time[censored_after_274] = 274
status[censored_after_274] = 0
# Create data frame for Cox regression
data = data.frame(
time = time,
status = status,
arm = arm
)
# Fit Cox model
cox_model = coxph(Surv(time, status) ~ arm, data = data)
# Extract p-value for the treatment effect (arm)
p_val = summary(cox_model)$coefficients["armT", "Pr(>|z|)"]
# Reject H0 if p-value < 0.05
H0_reject_vec[i] = ifelse(p_val < 0.05, 1, 0)
}
power.est = mean(H0_reject_vec)
return(power.est)
}
# Parameters
nsim = 1000
N = 320  # Number of participants per group (example)
rate_C = log(2) / 103  # Hazard rate for control group (median = 103 days)
rate_T = log(2) / 138  # Hazard rate for treatment group (median = 138 days)
# Run the simulation
power = exp_sim_cox(nsim, N, rate_C, rate_T)
## Analysis
install.packages(c("HSAUR", "HSAUR3", "pROC", "survival", "ggsurvfit", "survminer", "car", "dplyr"))
install.packages(c("HSAUR", "HSAUR3", "pROC", "survival", "ggsurvfit", "survminer", "car", "dplyr"))
library(HSAUR)
library(HSAUR3)
library(pROC)
library(survival)
library(ggsurvfit)
library(survminer)
library(car)
library(dplyr)
# Simulation Method with Censoring
exp_sim_cox = function(
nsim,     # Number of simulations
N,        # Number of participants per group
rate_C,   # Hazard rate in control group (lambda_C)
rate_T    # Hazard rate in treatment group (lambda_T)
){
H0_reject_vec = rep(NA, nsim) # Store 1 if H0 rejected, 0 otherwise
for (i in 1:nsim){
# Simulate survival times from exponential distributions
surv_C = rexp(n = N, rate = rate_C)  # Control group
surv_T = rexp(n = N, rate = rate_T)  # Treatment group
# Combine survival times
time = c(surv_C, surv_T)
arm = rep(c("C", "T"), each = N)
# Create initial status vector (1 for events)
status = rep(1, 2 * N)
# 5% random censoring for dropouts
dropout_indices = sample(1:(2 * N), size = round(0.05 * 2 * N))
status[dropout_indices] = 0
time[dropout_indices] = runif(length(dropout_indices), 0, time[dropout_indices])
# Censor everything after 274 days
censored_after_274 = time > 274
time[censored_after_274] = 274
status[censored_after_274] = 0
# Create data frame for Cox regression
data = data.frame(
time = time,
status = status,
arm = arm
)
# Fit Cox model
cox_model = coxph(Surv(time, status) ~ arm, data = data)
# Extract p-value for the treatment effect (arm)
p_val = summary(cox_model)$coefficients["armT", "Pr(>|z|)"]
# Reject H0 if p-value < 0.05
H0_reject_vec[i] = ifelse(p_val < 0.05, 1, 0)
}
power.est = mean(H0_reject_vec)
return(power.est)
}
# Parameters
nsim = 1000
N = 320  # Number of participants per group (example)
rate_C = log(2) / 103  # Hazard rate for control group (median = 103 days)
rate_T = log(2) / 138  # Hazard rate for treatment group (median = 138 days)
# Run the simulation
power = exp_sim_cox(nsim, N, rate_C, rate_T)
cat("Power:", power, "\n")
sim_vec = rep(NA, 100)
for (i in 1:100) {
sim_vec[i] = exp_sim_cox(nsim = 10000, N = 320, rate_C = rate_C, rate_T = rate_T)
# Print progress every 10%
if (i %% 10 == 0) {
cat("+", i, "% complete\n")
}
}
results <- read.csv("C:\\Users\\raulu\\OneDrive\\Documents\\4th Year\\CTs\\Summatives\\Summative 2\\Data\\trial_results.csv")
results
dim(results)
colnames(results)
table(results$arm)
# D.2.1.1 Kaplan-Meier
surv_obj = Surv(results$eventtime, results$status)
surv_obj
# To fit a Kaplan-Meier survival curve, we use the function survfit, which is specified using a formula, much like lm or glm.
# To fit a Kaplan-Meier estimate with a data frame split by treatment effect, the general form is:
km = survfit(surv_obj ~ DiseaseLevel, data=results)
summary(km)
km %>%  ggsurvfit() +
add_censor_mark() +
add_risktable() +
add_confidence_interval()
# To fit an exponential distribution, we need to estimate  λC and λT, using
mC = sum((results$status==1)&(results$DiseaseLevel=="Moderate"))
mT = sum((results$status==1)&(results$DiseaseLevel=="Severe"))
tsum_C = sum(results$eventtime[results$DiseaseLevel=="Moderate"])
tsum_T = sum(results$eventtime[results$DiseaseLevel=="Severe"])
lamhat_C = mC / tsum_C
lamhat_T = mT / tsum_T
exp_st = function(t, lambda){exp(-lambda*t)}
km %>% ggsurvfit() + ylim(0,1) + theme_bw() +
add_censor_mark() +
geom_function(fun=exp_st, args=list(lambda = lamhat_C), col="darkturquoise") +
geom_function(fun=exp_st, args=list(lambda = lamhat_T), col="red")
# We already have the mX and tX+ from Exercise D.9, and we can easily find t+ and m from these.
m = mT + mC
tsum = tsum_T + tsum_C
# and we can use these to compute λLR:
LRstat =  2*(mC*log(mC/tsum_C) + mT*log(mT/tsum_T) - m*log(m/tsum))
LRstat
# Finally, we refer this to Chi-Squared_1:
1-pchisq(LRstat, df=1)
# The general form is similar to survfit:
survdiff(surv_obj ~ DiseaseLevel, data=results, rho=0)
# Finally, we will fit the Cox regression model.
# This is done using the function coxph in the package survival.
initial_cox = coxph(formula = Surv(eventtime, status)~DiseaseLevel, data=results)
initial_cox
# There are baseline covariates here so use them in the Cox Regression model
cox = coxph(formula = Surv(eventtime, status)~DiseaseLevel + Age + arm, data=results)
cox
summary(cox)
surv_obj = Surv(results$eventtime, results$status) # D.2.1.1 Kaplan-Meier
surv_obj
# We can visualise this by further subsetting the Kaplan-Meier estimator
km_full = survfit(surv_obj ~ DiseaseLevel + arm, data=results)
km_full %>% ggsurvfit() +
add_censor_mark()
# eventtime is a numeric output, so one way to get a visual impression of its effect on the survival curve we can bin it.
# For example, we can choose  eventtime ≤ 138 and eventtime > 138.
results$eventtime138 = sapply(1:nrow(results), function(i){ifelse(results$eventtime[i]>138, 1, 0)})
km_full = survfit(surv_obj ~ DiseaseLevel + eventtime138, data=results)
km_full %>% ggsurvfit()
# To check our model more carefully we can use the log-log plot for the categorical variables:
km_full = survfit(surv_obj ~ DiseaseLevel + arm, data=results)
ggsurvplot(km_full, fun = "cloglog")
# and the Schoenfeld residuals for the continuous residuals (after removing the insignificant variables):
cox_schon = coxph(formula = surv_obj ~ DiseaseLevel + Age +  arm, data=results)
ggcoxzph(cox.zph(cox_schon), var = "Age")
results
colnames(results)
# We can visualise this by further subsetting the Kaplan-Meier estimator
km_full = survfit(surv_obj ~ DiseaseLevel + arm, data=results)
km_full %>% ggsurvfit() +
add_censor_mark()
# To check our model more carefully we can use the log-log plot for the categorical variables:
km_full = survfit(surv_obj ~ DiseaseLevel + arm, data=results)
ggsurvplot(km_full, fun = "cloglog")
# eventtime is a numeric output, so one way to get a visual impression of its effect on the survival curve we can bin it.
# For example, we can choose  eventtime ≤ 138 and eventtime > 138.
results$eventtime138 = sapply(1:nrow(results), function(i){ifelse(results$eventtime[i]>138, 1, 0)})
km_full = survfit(surv_obj ~ DiseaseLevel + eventtime138, data=results)
km_full %>% ggsurvfit()
# and the Schoenfeld residuals for the continuous residuals (after removing the insignificant variables):
cox_schon = coxph(formula = surv_obj ~ DiseaseLevel + Age +  arm, data=results)
ggcoxzph(cox.zph(cox_schon), var = "Age")
# We can visualise this by further subsetting the Kaplan-Meier estimator
km_full = survfit(surv_obj ~ DiseaseLevel + arm, data=results)
km_full %>% ggsurvfit() +
add_censor_mark()
# There are baseline covariates here so use them in the Cox Regression model
cox = coxph(formula = Surv(eventtime, status)~DiseaseLevel + Age + arm, data=results)
cox
colnames(results)
# D.2.2.3 Cox regression
# To consider trial scenario...
results$Age70 <- ifelse(results$Age >= 70, 1, 0)
# Finally, we will fit the Cox regression model.
# This is done using the function coxph in the package survival.
initial_cox = coxph(formula = Surv(eventtime, status)~DiseaseLevel, data=results)
initial_cox
# Create Age70 binary variable
results$Age70 <- ifelse(results$Age >= 70, 1, 0)
# --- Primary Cox Model (as per trial's design)
# Includes baseline covariates but not interaction terms
cox_main <- coxph(Surv(eventtime, status) ~ DiseaseLevel + Age + arm, data = results)
summary(cox_main)
# --- Supplementary KM plot for Age Group and Treatment Arm
# Addresses clinician interest in Age ≥ 70 descriptively
km_agegroup <- survfit(Surv(eventtime, status) ~ Age70 + arm, data = results)
ggsurvfit(km_agegroup) +
add_censor_mark() +
ggtitle("Survival by Age Group and Treatment Arm")
# --- Optional: Exploratory interaction model (not pre-specified)
# Tests whether treatment effect differs by Age70 group
cox_interaction <- coxph(Surv(eventtime, status) ~ DiseaseLevel + Age70 * arm, data = results)
summary(cox_interaction)
# --- Kaplan-Meier estimator with 138-day threshold (clinical relevance)
results$eventtime138 <- ifelse(results$eventtime > 138, 1, 0)
km_138 <- survfit(Surv(eventtime, status) ~ DiseaseLevel + eventtime138, data = results)
ggsurvfit(km_138) +
ggtitle("Survival relative to 138-day clinical threshold")
# --- Log-log plot to assess proportional hazards
km_loglog <- survfit(Surv(eventtime, status) ~ DiseaseLevel + arm, data = results)
ggsurvplot(km_loglog, fun = "cloglog")
# --- Schoenfeld residuals check (continuous Age retained for assumption check)
cox_schon <- coxph(Surv(eventtime, status) ~ DiseaseLevel + Age + arm, data = results)
ggcoxzph(cox.zph(cox_schon), var = "Age")
# Create Age70 binary variable
results$Age70 <- ifelse(results$Age >= 70, 1, 0)
# --- Primary Cox Model (as per trial's design)
# Includes baseline covariates but not interaction terms
cox_main <- coxph(Surv(eventtime, status) ~ DiseaseLevel + Age + arm, data = results)
summary(cox_main)
# --- Supplementary KM plot for Age Group and Treatment Arm
# Addresses clinician interest in Age ≥ 70 descriptively
km_agegroup <- survfit(Surv(eventtime, status) ~ Age70 + arm, data = results)
ggsurvfit(km_agegroup) +
add_censor_mark() +
ggtitle("Survival by Age Group and Treatment Arm")
# --- Optional: Exploratory interaction model (not pre-specified)
# Tests whether treatment effect differs by Age70 group
cox_interaction <- coxph(Surv(eventtime, status) ~ DiseaseLevel + Age70 * arm, data = results)
summary(cox_interaction)
# --- Kaplan-Meier estimator with 138-day threshold (clinical relevance)
results$eventtime138 <- ifelse(results$eventtime > 138, 1, 0)
km_138 <- survfit(Surv(eventtime, status) ~ DiseaseLevel + eventtime138, data = results)
ggsurvfit(km_138) +
ggtitle("Survival relative to 138-day clinical threshold")
# --- Log-log plot to assess proportional hazards
km_loglog <- survfit(Surv(eventtime, status) ~ DiseaseLevel + arm, data = results)
ggsurvplot(km_loglog, fun = "cloglog")
# --- Schoenfeld residuals check (continuous Age retained for assumption check)
cox_schon <- coxph(Surv(eventtime, status) ~ DiseaseLevel + Age + arm, data = results)
ggcoxzph(cox.zph(cox_schon), var = "Age")
# --- Supplementary KM plot for Age Group and Treatment Arm
# Addresses clinician interest in Age ≥ 70 descriptively
km_agegroup <- survfit(Surv(eventtime, status) ~ Age70 + arm, data = results)
ggsurvfit(km_agegroup) +
add_censor_mark() +
ggtitle("Survival by Age Group and Treatment Arm")
# --- Supplementary KM plot for Age Group and Treatment Arm
# Addresses clinician interest in Age ≥ 70 descriptively
km_agegroup <- survfit(Surv(eventtime, status) ~ Age70 + arm, data = results)
ggsurvfit(km_agegroup) +
add_censor_mark() +
ggtitle("Survival by Age Group and Treatment Arm")
km_138 <- survfit(Surv(eventtime, status) ~ DiseaseLevel + eventtime138, data = results)
ggsurvfit(km_138) +
ggtitle("Survival relative to 138-day clinical threshold")
# --- Kaplan-Meier estimator with 138-day threshold (clinical relevance)
km_138_age <- survfit(Surv(eventtime, status) ~ DiseaseLevel + eventtime138, data = results)
ggsurvfit(km_138_age) +
ggtitle("Survival relative to 138-day clinical threshold with Age Subgroups")
# --- Kaplan-Meier estimator with 138-day threshold (clinical relevance)
km_138_age <- survfit(Surv(eventtime, status) ~ DiseaseLevel + eventtime138 + Age70, data = results)
ggsurvfit(km_138_age) +
ggtitle("Survival relative to 138-day clinical threshold with Age Subgroups")
# --- Kaplan-Meier estimator with 138-day threshold (clinical relevance)
km_138_age <- survfit(Surv(eventtime, status) ~ DiseaseLevel + eventtime138 + Age70, data = results)
ggsurvfit(km_138_age) +
ggtitle("Survival relative to 138-day clinical threshold with Age Subgroups and DiseaseLevel")
km_138_age <- survfit(Surv(eventtime, status) ~ Age70 + eventtime138, data = results)
ggsurvfit(km_138_age) +
ggtitle("Survival stratified by Age Group and 138-Day Threshold")
km_138_age <- survfit(Surv(eventtime, status) ~ Age70 + eventtime138 + arm, data = results)
ggsurvfit(km_138_age) +
ggtitle("Survival stratified by Age Group and 138-Day Threshold")
strata(results$Age70)
ggcoxzph(cox.zph(cox_schon), var = "DiseaseLevel")
ggcoxzph(cox.zph(cox_schon), var = "Age")
ggcoxzph(cox.zph(cox_schon), var = "arm")
summary(cox_schon)
table(results$DiseaseLevel)
table(results$arm)
cox.zph_out <- cox.zph(cox_schon)
print(cox.zph_out)
colnames(results)
# --- Log-log plot to assess proportional hazards
km_loglog <- survfit(Surv(eventtime, status) ~ DiseaseLevel + arm + Age70, data = results)
ggsurvplot(km_loglog, fun = "cloglog")
# --- Log-log plot to assess proportional hazards
km_loglog <- survfit(Surv(eventtime, status) ~ arm + Age70, data = results)
ggsurvplot(km_loglog, fun = "cloglog")
?ggsurvplot
# --- Log-log plot to assess proportional hazards
km_loglog <- survfit(Surv(eventtime, status) ~ arm + Age70, data = results)
ggsurvplot(km_loglog, fun = "cloglog", title = "Log-log plot by Age Group and Treatment Arm")
ggsurvplot(km_loglog, fun = "cloglog", title = "Log-log plot by Age Group and Arm")
# --- Supplementary KM plot for Age Group and Treatment Arm
# Addresses clinician interest in Age ≥ 70 descriptively
km_agegroup <- survfit(Surv(eventtime, status) ~ Age70 + arm, data = results)
ggsurvfit(km_agegroup) +
add_censor_mark() +
ggtitle("Survival by Age Group and Treatment Arm")
# --- Supplementary KM plot for Age Group and Treatment Arm
# Addresses clinician interest in Age ≥ 70 descriptively
km_agegroup <- survfit(Surv(eventtime, status) ~ Age70 + arm, data = results)
ggsurvfit(km_agegroup) +
add_censor_mark() +
ggtitle("Survival by Age Group and Arm")
# --- Log-log plot to assess proportional hazards
km_loglog <- survfit(Surv(eventtime, status) ~ arm + Age70, data = results)
ggsurvplot(km_loglog, fun = "cloglog", title = "Log-log plot by Age Group and Arm")
# D.2.2.3 Cox regression
# To consider the trial scenario:
# Clinicians are particularly interested in treatment effects among those aged 70+
results <- read.csv("C:\\Users\\raulu\\OneDrive\\Documents\\4th Year\\CTs\\Summatives\\Summative 2\\Data\\trial_results.csv")
colnames(results)
# Create Age70 binary variable
results$AgeGroup <- ifelse(results$Age >= 70, 1, 0)
# --- Primary Cox Model (as per trial's design)
# Includes baseline covariates but not interaction terms
cox_main <- coxph(Surv(eventtime, status) ~ DiseaseLevel + Age + arm, data = results)
summary(cox_main)
# --- Supplementary KM plot for Age Group and Treatment Arm
# Addresses clinician interest in Age ≥ 70 descriptively
km_agegroup <- survfit(Surv(eventtime, status) ~ Age70 + arm, data = results)
# --- Primary Cox Model (as per trial's design)
# Includes baseline covariates but not interaction terms
cox_main <- coxph(Surv(eventtime, status) ~ DiseaseLevel + Age + arm, data = results)
summary(cox_main)
# D.2.2.3 Cox regression
# To consider the trial scenario:
# Clinicians are particularly interested in treatment effects among those aged 70+
results <- read.csv("C:\\Users\\raulu\\OneDrive\\Documents\\4th Year\\CTs\\Summatives\\Summative 2\\Data\\trial_results.csv")
# Create Age70 binary variable
results$Age70 <- ifelse(results$Age >= 70, 1, 0)
# --- Primary Cox Model (as per trial's design)
# Includes baseline covariates but not interaction terms
cox_main <- coxph(Surv(eventtime, status) ~ DiseaseLevel + Age + arm, data = results)
summary(cox_main)
# --- Supplementary KM plot for Age Group and Treatment Arm
# Addresses clinician interest in Age ≥ 70 descriptively
km_agegroup <- survfit(Surv(eventtime, status) ~ Age70 + arm, data = results)
ggsurvfit(km_agegroup) +
add_censor_mark() +
ggtitle("Survival by Age70 and Arm")
# --- Log-log plot to assess proportional hazards
km_loglog <- survfit(Surv(eventtime, status) ~ arm + Age70, data = results)
ggsurvplot(km_loglog, fun = "cloglog", title = "Log-log plot by Age70 and Arm")
# --- Supplementary KM plot for Age Group and Treatment Arm
# Addresses clinician interest in Age ≥ 70 descriptively
km_agegroup <- survfit(Surv(eventtime, status) ~ Age70 + arm, data = results)
ggsurvfit(km_agegroup) +
add_censor_mark() +
ggtitle("Survival Probability by Age70 and Arm")
# --- Log-log plot to assess proportional hazards
km_loglog <- survfit(Surv(eventtime, status) ~ arm + Age70, data = results)
ggsurvplot(km_loglog, fun = "cloglog", title = "Log-log plot by Age70 and Arm")
strata(results$Age70)
# --- Schoenfeld residuals check (continuous Age retained for assumption check)
cox_schon <- coxph(Surv(eventtime, status) ~ DiseaseLevel + Age + arm, data = results)
summary(cox_schon)
cox.zph_out <- cox.zph(cox_schon)
print(cox.zph_out)
plot(cox.zph_out)
# Using Age70
cox_schon <- coxph(Surv(eventtime, status) ~ DiseaseLevel + Age70 + arm, data = results)
summary(cox_schon)
cox.zph_out <- cox.zph(cox_schon)
print(cox.zph_out)
plot(cox.zph_out)
# --- Schoenfeld residuals check (continuous Age retained for assumption check)
cox_schon_og <- coxph(Surv(eventtime, status) ~ DiseaseLevel + Age + arm, data = results)
summary(cox_schon_og)
cox.zph_out <- cox.zph(cox_schon_og)
print(cox.zph_out)
plot(cox.zph_out)
# --- Schoenfeld residuals check (continuous Age retained for assumption check)
cox_schon_og <- coxph(Surv(eventtime, status) ~ DiseaseLevel + Age + arm, data = results)
summary(cox_schon_og)
cox.zph_out_og <- cox.zph(cox_schon_og)
print(cox.zph_out_og)
# Using Age70
cox_schon_new <- coxph(Surv(eventtime, status) ~ DiseaseLevel + Age70 + arm, data = results)
summary(cox_schon_new)
cox.zph_out_new <- cox.zph(cox_schon_new)
print(cox.zph_out_new)
# Using Age70
cox_schon_new <- coxph(Surv(eventtime, status) ~ DiseaseLevel + strata(Age70) + arm, data = results)
summary(cox_schon_new)
cox.zph_out_new <- cox.zph(cox_schon_new)
print(cox.zph_out_new)
ggcoxzph(cox.zph(cox_schon_og), var = "age")
ggcoxzph(cox.zph(cox_schon_og), var = "Age")
ggsurvplot(km_loglog, fun = "cloglog", title = "Log-log plot by Age70 and Arm")
ggsurvfit(km_agegroup) +
add_censor_mark() +
ggtitle("Survival Probability for Age70 and Arm")
ggsurvplot(km_loglog, fun = "cloglog", title = "Log-log plot for Age70 and Arm")
print(cox.zph_out_og)
print(cox.zph_out_new)
ggcoxzph(cox.zph(cox_schon_og), var = "Age")
ggcoxzph(cox.zph(cox_schon_og), var = "DiseaseLevel")
# Using Age70
cox_schon_new <- coxph(Surv(eventtime, status) ~ DiseaseLevel + strata(Age70) + arm, data = results)
cox.zph_out_new <- cox.zph(cox_schon_new)
print(cox.zph_out_new)
summary(cox_schon_new)
any(is.na(participants_to_allocate))
balance1
balance1
table(allocated_data$DiseaseLevel)
print(cox.zph_out_new)
ggcoxzph(cox.zph(cox_schon_new), var = "arm")
ggcoxzph(cox.zph(cox_schon_new), var = "DiseaseLevel")
